#recursive Digit Sum
def calc(p):

            if int(p) < 10:
                return int(p)

            else:
                l = []
                for x in str(p):
                    l.append(int(x))

                # _sum = sum(l) 

                return calc(sum(l))
    
    s = k*calc(n)
    return calc(s)
    
    
    
    #mark and toys
    
    summ = 0 
    counter = -1
    price = sorted(prices)
    for i in range(0, len(price)):
        if summ < k:
            summ = summ + price[i]
            counter += 1
    return counter


    #Delete Node
    curr = llist
    while curr:
        while curr.next and curr.next.data == curr.data:
            curr.next = curr.next.next
        curr = curr.next
    
    return llist
    
    
    
    
    # merge point of Node
    def findMergeNode(head1, head2):

    def count_node(llist):
        count = 0
        
        while llist.next:
            count+=1
            llist = llist.next
        
        return count
    
    h1_len = count_node(head1)
    h2_len = count_node(head2)
    
    
    if h1_len > h2_len:
        n = h1_len - h2_len
        
        while n > 0:
            head1 = head1.next
            n -= 1
    
    elif h2_len > h1_len:
        n = h2_len - h1_len
        
        while n > 0:
            head2 = head2.next
            n -=1
    
    while head1 and head2:
        
        if head1 == head2:
            return head1.data
        
        head1 = head1.next
        head2 = head2.next
                
